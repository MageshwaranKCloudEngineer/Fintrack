pipeline {
    agent any

    environment {
        GIT_URL = 'https://github.com/MageshwaranKCloudEngineer/Fintrack'  
        GIT_CREDENTIALS_ID = 'github-credentials' 
        DOCKER_HUB_CREDENTIALS_ID = 'dockerhub-credentials' 
        DOCKER_IMAGE = 'magesh506/fintech-react-app' 
        IMAGE_TAG = 'Latest'  
        CONTAINER_NAME = 'devops-Fintech'  
        PORT = '9090'
    }

    stages {
        stage('Checkout') {
            steps {
                echo "Cloning repository..."
                git credentialsId: GIT_CREDENTIALS_ID, url: GIT_URL, poll: false
                
                echo "Workspace is located at: ${env.WORKSPACE}"
            }
        }


        stage('Install Dependencies and Build') {
            steps {
                script {
                    echo "Installing dependencies and building React app..."
                    dir("${env.WORKSPACE}/frontend/frontend") { 
                        sh 'npm install'
                        sh 'npm install axios'
                        sh 'export CI=false && npm run build'
                    }
                }
            }
        }

        stage('Prepare Dockerfile') {
            steps {
                script {
                    dir("${env.WORKSPACE}/frontend/frontend") { 
                        writeFile file: 'Dockerfile', text: '''
                        FROM nginx:alpine
                        COPY build /usr/share/nginx/html
                        EXPOSE 80
                        '''
                        echo "Dockerfile created for deployment."
                    }
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    echo "Building and pushing Docker image..."
                    withCredentials([usernamePassword(credentialsId: DOCKER_HUB_CREDENTIALS_ID, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        dir("${env.WORKSPACE}/frontend/frontend") { 
                            sh """
                            set -e
                            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
                            docker build -t ${DOCKER_IMAGE}:${IMAGE_TAG} .
                            docker push ${DOCKER_IMAGE}:${IMAGE_TAG}
                            docker logout
                            """
                        }
                    }
                }
            }
        }


        stage('Deploy Locally') {
            steps {
                script {
                    echo "Deploying Docker container locally..."
                    sh """
                    set -e

                    # Pull the latest Docker image
                    docker pull ${DOCKER_IMAGE}:${IMAGE_TAG}

                    # Check if the container exists before stopping and removing
                    if docker ps -a --filter "name=${CONTAINER_NAME}" --format "{{.Names}}" | grep -w ${CONTAINER_NAME}; then
                        echo "Container ${CONTAINER_NAME} exists. Stopping and removing it."
                        docker stop ${CONTAINER_NAME}
                        docker rm ${CONTAINER_NAME}
                    else
                        echo "Container ${CONTAINER_NAME} does not exist. Skipping stop and remove."
                    fi

                    # Run the container on the specified port
                    docker run -d --name ${CONTAINER_NAME} -p ${PORT}:80 ${DOCKER_IMAGE}:${IMAGE_TAG}
                    """
                }
            }
        }

        stage('Cleanup') {
            steps {
                script {
                    echo "Cleaning up unused Docker resources..."
                    sh 'docker system prune -f'
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment completed successfully!'
        }
        failure {
            echo 'Deployment failed.'
        }
    }
}
